!function(){"use strict";class e{constructor(e,t){let{data:r,renderer:s}=e;this._initialArray=r,this._renderer=s,this._container=t}renderItems(){this._initialArray.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class t{constructor(e,t,r){let{data:s,handleImageClick:n,handleTrashClick:i,handleLikeClick:o}=e;this._text=s.name,this._image=s.link,this._likes=s.likes,this._id=s._id,this._owner=s.owner,this._cardSelector=t,this._userId=r,this._handleImageClick=n,this._handleTrashClick=i,this._handleLikeClick=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__card").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".gallery__card-image"),t=this._element.querySelector(".gallery__card-place"),r=this._element.querySelector(".gallery__card-like_counter"),s=this._element.querySelector(".gallery__card-trash-button");return e.style.backgroundImage="url(".concat(this._image,")"),t.textContent=this._text,r.textContent=this._likes.length,this._owner._id!==this._userId&&s.classList.remove("gallery__card-trash-button_active"),this._renderLikes(),this._element}_setEventListeners(){const e=this._element.querySelector(".gallery__card-like_button"),t=this._element.querySelector(".gallery__card-trash-button");this._element.querySelector(".gallery__card-image").addEventListener("click",(()=>this._handleImageClick())),e.addEventListener("click",(()=>this._handleLikeClick(this._id))),t.addEventListener("click",(()=>this._handleTrashClick(this._id)))}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){const e=this._element.querySelector(".gallery__card-like_button");this._element.querySelector(".gallery__card-like_counter").textContent=this._likes.length,this.isLiked()?e.classList.add("gallery__card-like_button_active"):e.classList.remove("gallery__card-like_button_active")}removeCard(){this._element.remove(),this._element=null}}var r=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t,this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector)),this._buttonElement=this._element.querySelector(this._submitButtonSelector)}_showInputError(e,t){const r=this._element.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideInputError(e){const t=this._element.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}resetValidationError(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._element.addEventListener("submit",(function(e){e.preventDefault()})),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e){var t,r;r=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[t]=r,this._popupSelector=e,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupSelector.classList.add("popup_fadein"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupSelector.classList.remove("popup_fadein"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupSelector.addEventListener("click",(e=>{e.target.classList.contains("close-button")&&this.close()})),this._popupSelector.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._formSelector=e.querySelector(".form"),this._submitButton=e.querySelector(".form__button"),this._buttonText=this._submitButton.textContent}_getInputValues(){const e=Array.from(this._formSelector.querySelectorAll(".form__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._formSelector.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValues())))}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._buttonText}}const i=document.querySelector(".avatar"),o=document.querySelector(".edit"),a=document.querySelector(".add"),l=document.querySelector(".image"),c=document.querySelector(".delete"),d=document.querySelector(".profile__edit-button"),_=(o.querySelector(".edit__close-button"),document.querySelector(".profile__add-button")),h=(a.querySelector(".add__close-button"),l.querySelector(".image__close-button"),document.getElementById("gallery-container"),document.querySelector(".gallery__container")),u=document.querySelector(".edit__form"),m=a.querySelector(".add__form"),p=document.querySelector(".avatar__form"),g=document.getElementById("name-input"),v=document.getElementById("job-input"),y=document.getElementById("avatar-input"),S=(document.querySelector(".profile__name"),document.querySelector(".profile__name-discription"),document.querySelector(".profile__image")),b={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},E=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject("Something went wrong: ".concat(e.status)))),L=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getUserInfo(){return E("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}sendUserInfo(e){return E("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.job})})}sendUserAavatar(e){return E("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}getInitialCards(){return E("".concat(this._baseUrl,"/cards"),{headers:this._headers})}sendNewCard(e){return E("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.image})})}deleteCard(e){return E("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers})}likeCard(e){return E("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers})}unlikeCard(e){return E("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"6a85a377-e76e-4e72-85a9-79ee5208e36a","Content-Type":"application/json"}});let C;Promise.all([L.getInitialCards(),L.getUserInfo()]).then((t=>{let[r,s]=t;C=s._id,console.log(r);const n=new e({data:r,renderer:e=>{const t=q(e);n.addItem(t)}},h);n.renderItems(),I.setUserInfo({name:s.name,job:s.about}),I.setUserAvatar({avatar:s.avatar})})).catch((e=>{console.log(e)}));const f=new class extends s{open(e,t){const r=this._popupSelector.querySelector(".image__popup"),s=this._popupSelector.querySelector(".image__discription");r.src=e,r.alt=t,s.textContent=t,super.open()}}(l),k=new class extends s{constructor(e){super(e),this._formSelector=e.querySelector(".form"),this._submitButton=e.querySelector(".button"),this._text=this._submitButton.textContent}setAction(e){this._handleSubmit=e}setEventListeners(){this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}renderLoading(e){this._submitButton.textContent=e?"Deleting...":this._text}}(c);function q(e){const r=new t({data:e,handleImageClick:()=>{f.open(e.link,e.name)},handleTrashClick:e=>{k.open(),k.setAction((()=>{k.renderLoading(!0),L.deleteCard(e).then((()=>{r.removeCard(),k.close()})).catch((e=>{console.log(e)})).finally((()=>{k.renderLoading(!1)}))}))},handleLikeClick:e=>{r.isLiked()?L.unlikeCard(e).then((e=>{r.updateLikes(e.likes)})).catch((e=>{console.log(e)})):L.likeCard(e).then((e=>{r.updateLikes(e.likes)})).catch((e=>{console.log(e)}))}},"#card-template",C);return r.generateCard()}const I=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:r}=e;this._nameElement.textContent=t,this._jobElement.textContent=r}setUserAvatar(e){let{avatar:t}=e;this._avatarElement.src=t}}({nameSelector:".profile__name",jobSelector:".profile__name-discription",avatarSelector:".profile__image"}),U=new n(i,(e=>{U.renderLoading(!0),L.sendUserAavatar(e).then((()=>{I.setUserAvatar(e),U.close()})).catch((e=>{console.log(e)})).finally((()=>{U.renderLoading(!1)}))})),w=new n(o,(e=>{w.renderLoading(!0),L.sendUserInfo(e).then((()=>{I.setUserInfo({name:e.name,job:e.job}),w.close()})).catch((e=>{console.log(e)})).finally((()=>{w.renderLoading(!1)}))})),x=new n(a,(e=>{x.renderLoading(!0),L.sendNewCard(e).then((e=>{const t=q(e);h.prepend(t)})).catch((e=>{console.log(e)})).finally((()=>{x.renderLoading(!1),x.close(),m.reset(),A.resetValidationError()}))}));function B(e){g.value=e.name,v.value=e.job,y.value=e.avatar}w.setEventListeners(),x.setEventListeners(),f.setEventListeners(),k.setEventListeners(),U.setEventListeners(),S.addEventListener("click",(()=>{B(I.getUserInfo()),U.open()})),d.addEventListener("click",(()=>{B(I.getUserInfo()),w.open()})),_.addEventListener("click",(()=>{x.open()}));const j=new r(b,p),T=new r(b,u),A=new r(b,m);j.enableValidation(),T.enableValidation(),A.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,