!function(){"use strict";class e{constructor(e,t){let{data:r,renderer:s}=e;this._initialArray=r,this._renderer=s,this._container=t}renderItems(){this._initialArray.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class t{constructor(e,t,r){let{data:s,handleImageClick:n,handleTrashClick:i,handleLikeClick:a}=e;this._text=s.name,this._image=s.link,this._likes=s.likes,this._id=s._id,this._cardSelector=t,this._userId=r,this._handleImageClick=n,this._handleTrashClick=i,this._handleLikeClick=a}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__card").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".gallery__card-image"),t=this._element.querySelector(".gallery__card-place"),r=this._element.querySelector(".gallery__card-like_counter");return e.style.backgroundImage="url(".concat(this._image,")"),t.textContent=this._text,r.textContent=this._likes.length,this._likes.some((e=>e._id===this._userId))&&this.likeCard(this._likes),this._element}_setEventListeners(){const e=this._element.querySelector(".gallery__card-like_button"),t=this._element.querySelector(".gallery__card-trash-button");this._element.querySelector(".gallery__card-image").addEventListener("click",(()=>this._handleImageClick())),e.addEventListener("click",(()=>this._handleLikeClick(this._id))),t.addEventListener("click",(()=>this._handleTrashClick(this._id)))}isLiked(){return this._likes.some((e=>e._id===this._userId))}likeCard(e){this._likes=e;const t=this._element.querySelector(".gallery__card-like_button");this._element.querySelector(".gallery__card-like_counter").textContent=this._likes.length,t.classList.toggle("gallery__card-like_button_active")}removeCard(){this._element.remove(),this._element=null}}var r=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t,this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector)),this._buttonElement=this._element.querySelector(this._submitButtonSelector)}_showInputError(e,t){const r=this._element.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideInputError(e){const t=this._element.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}resetValidationError(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._element.addEventListener("submit",(function(e){e.preventDefault()})),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e){var t,r;r=e=>{"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[t]=r,this._popupSelector=e,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupSelector.classList.add("popup_fadein"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupSelector.classList.remove("popup_fadein"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupSelector.addEventListener("click",(e=>{e.target.classList.contains("close-button")&&this.close()})),this._popupSelector.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._formSelector=e.querySelector(".form"),this._submitButton=e.querySelector(".form__button")}_getInputValues(){const e=Array.from(this._formSelector.querySelectorAll(".form__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._formSelector.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValues())))}renderLoading(e){e?this._submitButton.textContent="Saving...":this._submitButton.classList.contains("form__button-create")?this._submitButton.textContent="Create":this._submitButton.textContent="Save"}}const i=document.querySelector(".avatar"),a=document.querySelector(".edit"),o=document.querySelector(".add"),l=document.querySelector(".image"),c=document.querySelector(".delete"),d=document.querySelector(".profile__edit-button"),_=(a.querySelector(".edit__close-button"),document.querySelector(".profile__add-button")),u=(o.querySelector(".add__close-button"),l.querySelector(".image__close-button"),document.getElementById("gallery-container"),document.querySelector(".gallery__container")),h=document.querySelector(".edit__form"),m=o.querySelector(".add__form"),p=document.querySelector(".avatar__form"),v=document.getElementById("name-input"),g=document.getElementById("job-input"),y=document.getElementById("avatar-input"),S=(document.querySelector(".profile__name"),document.querySelector(".profile__name-discription"),document.querySelector(".profile__image")),b={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},E=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject("Something went wrong: ".concat(e.status)))).catch((e=>{console.log(e)})),C=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getUserInfo(){return E("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}sendUserInfo(e){return E("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.job})})}sendUserAavatar(e){return E("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}getInitialCards(){return E("".concat(this._baseUrl,"/cards"),{headers:this._headers})}sendNewCard(e){return E("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.image})})}deleteCard(e){return E("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers})}likeCard(e){return E("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers})}unlikeCard(e){return E("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"6a85a377-e76e-4e72-85a9-79ee5208e36a","Content-Type":"application/json"}});let L;Promise.all([C.getInitialCards(),C.getUserInfo()]).then((t=>{let[r,s]=t;L=s._id;const n=new e({data:r,renderer:e=>{const t=q(e);e.owner._id!==L&&t.querySelector(".gallery__card-trash-button").classList.remove("gallery__card-trash-button_active"),n.addItem(t)}},u);n.renderItems(),I.setUserInfo({name:s.name,job:s.about}),I.setUserAvatar({avatar:s.avatar})}));const f=new class extends s{open(e,t){const r=this._popupSelector.querySelector(".image__popup"),s=this._popupSelector.querySelector(".image__discription");r.src=e,r.alt=t,s.textContent=t,super.open()}}(l),k=new class extends s{constructor(e){super(e),this._formSelector=e.querySelector(".form"),this._submitButton=e.querySelector(".delete__button")}setAction(e){this._submitHandler=e}setEventListeners(){this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}renderLoading(e){this._submitButton.textContent=e?"Deleting...":"Yes"}}(c);function q(e){const r=new t({data:e,handleImageClick:()=>{f.open(e.link,e.name)},handleTrashClick:e=>{k.open(),k.setAction((()=>{k.renderLoading(!0),C.deleteCard(e).finally((()=>{k.renderLoading(!1),r.removeCard(),k.close()}))}))},handleLikeClick:e=>{r.isLiked()?C.unlikeCard(e).then((e=>{r.likeCard(e.likes)})):C.likeCard(e).then((e=>{r.likeCard(e.likes)}))}},"#card-template",L);return r.generateCard()}const I=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:r}=e;this._nameElement.textContent=t,this._jobElement.textContent=r}setUserAvatar(e){let{avatar:t}=e;this._avatarElement.src=t}}({nameSelector:".profile__name",jobSelector:".profile__name-discription",avatarSelector:".profile__image"}),U=new n(i,(e=>{U.renderLoading(!0),C.sendUserAavatar(e).finally((()=>{U.renderLoading(!1),I.setUserAvatar(e),U.close()}))})),B=new n(a,(e=>{B.renderLoading(!0),C.sendUserInfo(e).finally((()=>{B.renderLoading(!1),I.setUserInfo({name:e.name,job:e.job}),B.close()}))})),w=new n(o,(e=>{w.renderLoading(!0),console.log("is Loading"),C.sendNewCard(e).then((e=>{const t=q(e);u.prepend(t)})).finally((()=>{w.renderLoading(!1),w.close(),m.reset(),T.resetValidationError()}))}));function x(e){v.value=e.name,g.value=e.job,y.value=e.avatar}B.setEventListeners(),w.setEventListeners(),f.setEventListeners(),k.setEventListeners(),U.setEventListeners(),S.addEventListener("click",(()=>{x(I.getUserInfo()),U.open()})),d.addEventListener("click",(()=>{x(I.getUserInfo()),B.open()})),_.addEventListener("click",(()=>{w.open()}));const j=new r(b,p),A=new r(b,h),T=new r(b,m);j.enableValidation(),A.enableValidation(),T.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,